#Définition des stages
stages:
  - build #Test de la compilation
  - tests #Execution des tests
  - deploy #Depoiement sur le serveur de production

build:
  stage: build
  image: tmaier/docker-compose:latest #Image utilisée pour exécuter le docker compose
  services:
    - docker:dind #Pour faire fonctionner Docker dans Docker
  script:
      - docker-compose build # Execution du build
  only: #Exécuté au push sur main et develop
      - develop 
      - main
  
tests:
  stage: tests
  image: tmaier/docker-compose:latest
  services:
    - docker:dind
  script:
    - docker-compose -f docker-compose-test.yaml up --build # Execution des tests
  needs:
    - job: build
  only: #Exécuté au push sur main et develop
    - develop
    - main

production:
  image: alpine:latest # Image légère de Linux
  stage: deploy
  before_script:
  - apk add --update sshpass openssh # Installation des dépendances
  script:
    - sshpass -p $SSH_PASS ssh $SSH_USER@$VM_IPADDRESS -p 68 -o "StrictHostKeyChecking=no" "hostname" #Pour permettre la connexion en SSH au serveur de prod
    - sshpass -p $SSH_PASS ssh $SSH_USER@$VM_IPADDRESS -p 68 "~/deploy.sh" # Script permettant le déploiement
    - sshpass -p $SSH_PASS ssh $SSH_USER@$VM_IPADDRESS -p 68 "cd ~/fil_rouge && docker compose -f docker-compose.yaml up --build -d" # Lancement du docker
  only:
    - main # Exécuté uniquement au push ou merge sur main
  needs:
    - job: tests
